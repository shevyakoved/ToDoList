(Form.js)
export default App;
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Users({ postId }) {
  const [post, setPost] = useState(null);
  const [user, setUser] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPostAndUser = async () => {
      try {
        const [postResponse, userResponse] = await Promise.all([
          axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`),
          axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`),
        ]);
        setPost(postResponse.data);
        setUser(userResponse.data);
      } catch (error) {
        setError(error.message);
      }
    };

    Users();

  }, [postId]);
  return (
    <div>
      {error && <div>Error: {error}</div>}
      {post && user && (
        <div>
          <div>
            <strong>Title:</strong> {post.title}
          </div>
          <div>
            <strong>Body:</strong> {post.body}
          </div>
          <div>
            <strong>Name:</strong> {user.name}
          </div>
          <div>
            <strong>Email:</strong> {user.email}
          </div>
        </div>
      )}
      {!post && !error && <div>Loading...</div>}
    </div>
  );
}
export default Users;

(Form.test.js)
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import axios from 'axios';
import Users from './Users'; // Путь к вашему компоненту Users
import '@testing-library/jest-dom/extend-expect';

jest.mock('axios');

describe('Users component', () => {
  test('displays loading message initially', () => {
    render(<Users postId={1} />);
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });

  test('displays post and user data', async () => {
    const post = { title: 'Test Post', body: 'This is a test post.' };
    const user = { name: 'John Doe', email: 'john.doe@example.com' };

    axios.get.mockResolvedValueOnce({ data: post }).mockResolvedValueOnce({ data: user });

    render(<Users postId={1} />);

    await waitFor(() => expect(screen.getByText('Title:')).toBeInTheDocument());

    expect(screen.getByText('Test Post')).toBeInTheDocument();
    expect(screen.getByText('This is a test post.')).toBeInTheDocument();
    expect(screen.getByText('John Doe')).toBeInTheDocument();
    expect(screen.getByText('john.doe@example.com')).toBeInTheDocument();
  });

  test('displays error message on failure', async () => {
    axios.get.mockRejectedValueOnce(new Error('Network Error'));

    render(<Users postId={1} />);

    await waitFor(() => expect(screen.getByText('Error: Network Error')).toBeInTheDocument());
  });
});
